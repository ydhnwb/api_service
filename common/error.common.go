package common

import (
	"fmt"

	"github.com/go-playground/validator/v10"
)

type ResponseError struct {
	Error string `json:"error"`
}

var tagPrefixMap = map[string]string{
	//GENERATED BY GIN CONTEXT
	"required":      "field is required",
	"email":         "is invalid email",
	"min":           "does not fulfill minimum length",
	"max":           "is more than maximum length",
	"len":           "must match the length",
	"eq":            "is should equal to given rule",
	"gt":            "must be greater than given rule",
	"gte":           "must be greater or equal than given rule",
	"lt":            "must be less than given rule",
	"lte":           "must be less or equal than given rule",
	"fieldcontains": "must includes given rule",
	"fieldexcludes": "must not includes given rule",

	//MANUAL ERROR MESSAGE
	"auth_wrong_credentials": "Wrong credentials. Please check again your email and password",
	"invalid_date_format":    "Date is not valid",
}

var tagPrefixMapId = map[string]string{
	//GENERATED BY GIN CONTEXT
	"required":      "wajib diisi",
	"email":         "bukan format email yang valid",
	"min":           "tidak memenuhi minimum karakter",
	"max":           "lebih dari maksimum karakter yang diperbolehkan",
	"len":           "harus memiliki panjang karakter",
	"eq":            "harus sama dengan yang diatur",
	"gt":            "harus melebihi batas yang diatur",
	"gte":           "harus melebihi atau sama dengan batas yang diatur",
	"lt":            "harus kurang dari batas yang diatur",
	"lte":           "harus kurang dari atau sama dengan batas yang diatur",
	"fieldcontains": "harus memenuhi karakter tertentu yang sudah diatur",
	"fieldexcludes": "tidak boleh memiliki karakter tertentu yang sudah diatur",

	//MANUAL ERROR MESSAGE
	"auth_wrong_credentials": "Kombinasi email dan password salah",
	"invalid_date_format":    "Tanggal yang dimasukkan tidak valid",
}

func BuildErrorResponse(err error, useErrorID bool, args ...string) ResponseError {
	errMsg := translateError(err, useErrorID, args...)
	if errMsg == "" {
		// Sometimes, it does error, but fails to build error msg.
		// I force it to show an error as it is
		return ResponseError{
			Error: err.Error(),
		}
	}
	return ResponseError{
		Error: translateError(err, useErrorID, args...),
	}
}

func translateError(err error, useErrorID bool, args ...string) (errTxt string) {
	lang := "en"
	if len(args) > 0 {
		lang = args[0]
	}

	if !useErrorID {
		return err.Error()
	}

	validationErrors, ok := err.(validator.ValidationErrors)
	if !ok {
		if lang == "id" {
			return tagPrefixMapId[err.Error()]
		}
		return tagPrefixMap[err.Error()]
	}

	for _, e := range validationErrors {
		errTxt = composeFieldErrorMsgID(e, lang)
		break
	}
	return
}

func composeFieldErrorMsgID(e validator.FieldError, lang string) string {
	// This handle gin errors
	if lang == "id" {
		if prefix, ok := tagPrefixMapId[e.Tag()]; ok {
			if e.Param() != "" {
				return fmt.Sprintf("%s %s (%s)", e.Field(), prefix, e.Param())
			}
			return fmt.Sprintf("%s %s", e.Field(), prefix)
		}
	} else if prefix, ok := tagPrefixMap[e.Tag()]; ok {
		if e.Param() != "" {
			return fmt.Sprintf("%s %s (%s)", e.Field(), prefix, e.Param())
		}
		return fmt.Sprintf("%s %s", e.Field(), prefix)
	}

	fmt.Printf("Hello lang %s", lang)
	return e.Error()
}
